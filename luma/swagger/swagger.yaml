---
swagger: "2.0"
info:
  description: "LUMA (Local User MApping) is a REST server that exposes simple REST\
    \ API that\ncan be used to map users (of any system/kind) to storage specific\
    \ user\ncredentials (e.g. UID/GID, usernames and passwords or certificates), in\
    \ the\nprocess authorizing them with the storage.\n\nThis is a specification of\
    \ LUMA interface, which is understood by\nOneprovider, and for each storage it\
    \ is best to implement a specific LUMA\nimplementation.\n\nA stub implementation\
    \ can be generated automatically from this specification\nusing [Swagger Codegen](https://github.com/swagger-api/swagger-codegen)\n\
    tool in mulitple programming frameworks.\n\nLUMA provides a 2-way mapping interface\
    \ allowing to:\n * Get user credentials for specific storage based on user federated\
    \ Id\n * Get user federated Id (in specific IdP) based on storage credentials\n\
    \nAdditionally, LUMA allows for mapping between user groups on a federated (IdP)\n\
    level and storage, independently of any specific user.\n\nLUMA supports the same\
    \ storage systems which are supported by Oneprovider,\nand for each of them a\
    \ specific must be implemented as typically different\nstorage systems require\
    \ different types of credentials.\n\nAs of now there are the following supported\
    \ storage systems, each with it's\nown type of credentials:\n * Posix\n * Ceph\n\
    \ * Amazon S3\n * Openstack Swift\n * GlusterFS\n\nMore information: [https://github.com/onedata/luma](https://github.com/onedata/luma)\n"
  version: "19.02.3"
  title: "LUMA"
  contact:
    name: "Onedata support"
    url: "https://onedata.org/support"
    email: "info@onedata.org"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://onedata.org/assets/images/api/luma-logo.svg"
    backgroundColor: "#FFFFFF"
basePath: "/api/v3/luma"
tags:
- name: "Mapping"
  description: "User and group mapping"
- name: "Admin"
  description: "LUMA management endpoint"
paths:
  /admin/spaces/{sid}/default_group:
    get:
      tags:
      - "Admin"
      summary: "Get default space group"
      description: "Returns default group gid for a specific space."
      operationId: "controllers.default_controller.get_space_default_group"
      consumes:
      - "application/json"
      parameters:
      - name: "sid"
        in: "path"
        description: "Id of the space for which the default group gid should be returned.\n"
        required: true
        type: "string"
      responses:
        200:
          description: "Group details returned successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GroupDetails"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Group credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Set default space group"
      description: "Allows to specify a custom group gid for a space.\n"
      operationId: "controllers.default_controller.set_space_default_group"
      consumes:
      - "application/json"
      parameters:
      - name: "sid"
        in: "path"
        description: "Id of the space for which the default group gid should be set.\n"
        required: true
        type: "string"
      - in: "body"
        name: "groupDetails"
        description: "Add group details for mapping."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/GroupDetails"
      responses:
        204:
          description: "Group mapping added successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete default space group"
      description: "Allows to remove default group gid for a space.\n"
      operationId: "controllers.default_controller.delete_space_default_group"
      consumes:
      - "application/json"
      parameters:
      - name: "sid"
        in: "path"
        description: "Id of the space for which the default group gid should be removed.\n"
        required: true
        type: "string"
      responses:
        204:
          description: "Default group removed successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
  /admin/users:
    post:
      tags:
      - "Admin"
      summary: "Add user details"
      description: "Add user details and return user LUMA ID. This operation returns\
        \ the ID which represents the user in LUMA. It is necessary as not every user\
        \ mapping requires user Id, thus this ID represents uniquely a certain user\
        \ account for associated user accounts with storage credentials."
      operationId: "controllers.default_controller.add_user_details"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "userDetails"
        description: "User details for mapping."
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        201:
          description: "ID of the created LUMA user in the form /admin/users/{lid}\
            \ is returned in the response `Location` header.\n"
          headers:
            Location:
              type: "string"
              description: "ID of the LUMA user."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
  /admin/users/{lid}:
    get:
      tags:
      - "Admin"
      summary: "Get user details"
      description: "Returns user details known by LUMA."
      operationId: "controllers.default_controller.get_user_details"
      consumes:
      - "application/json"
      parameters:
      - name: "lid"
        in: "path"
        description: "LUMA user Id."
        required: true
        type: "integer"
      responses:
        200:
          description: "User details returned successfully."
          schema:
            $ref: "#/definitions/UserDetails"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Update user details"
      description: "Allows to update user details, based on which credential mapping\
        \ will be performed.\n"
      operationId: "controllers.default_controller.update_user_details"
      consumes:
      - "application/json"
      parameters:
      - name: "lid"
        in: "path"
        description: "LUMA user Id."
        required: true
        type: "integer"
      - in: "body"
        name: "userDetails"
        description: "Add user details for mapping."
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        204:
          description: "User details added successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete user details"
      description: "Deletes user details from LUMA database.\n"
      operationId: "controllers.default_controller.delete_user"
      consumes:
      - "application/json"
      parameters:
      - name: "lid"
        in: "path"
        description: "LUMA user Id."
        required: true
        type: "integer"
      responses:
        204:
          description: "User details removed successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
  /admin/users/{lid}/credentials:
    put:
      tags:
      - "Admin"
      summary: "Add user credentials"
      description: "Adds user credentials to specific storage (optional)."
      operationId: "controllers.default_controller.add_user_credentials"
      consumes:
      - "application/json"
      parameters:
      - name: "lid"
        in: "path"
        description: "LUMA user Id."
        required: true
        type: "integer"
      - in: "body"
        name: "credentials"
        description: "Add user credentials for specific storage."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/UserStorageCredentials"
      responses:
        204:
          description: "User credentials added successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
  /admin/{idp}/groups/{groupId}:
    get:
      tags:
      - "Admin"
      summary: "Get group mapping"
      description: "Returns group details known by LUMA."
      operationId: "controllers.default_controller.get_group_mapping"
      consumes:
      - "application/json"
      parameters:
      - name: "idp"
        in: "path"
        description: "Id of identity provider that was (or will be) used by subject\
          \ user to log in into onezone, identical to id specified in auth.config\
          \ / saml.config.\n"
        required: true
        type: "string"
      - name: "groupId"
        in: "path"
        description: "Id of a group as recognized by a specific identity provider.\n"
        required: true
        type: "string"
      responses:
        200:
          description: "Group details returned successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GroupDetails"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Group credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Set group mapping"
      description: "Allows to add group mapping to LUMA.\n"
      operationId: "controllers.default_controller.add_group_mapping"
      consumes:
      - "application/json"
      parameters:
      - name: "idp"
        in: "path"
        description: "Id of identity provider that was (or will be) used by subject\
          \ user to log in into onezone, identical to id specified in auth.config\
          \ / saml.config.\n"
        required: true
        type: "string"
      - name: "groupId"
        in: "path"
        description: "Id of a group as recognized by a specific identity provider.\n"
        required: true
        type: "string"
      - in: "body"
        name: "groupDetails"
        description: "Add group details for mapping."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/GroupDetails"
      responses:
        204:
          description: "Group mapping added successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete group mapping"
      description: "Allows to remove group mapping from LUMA.\n"
      operationId: "controllers.default_controller.delete_group_mapping"
      consumes:
      - "application/json"
      parameters:
      - name: "idp"
        in: "path"
        description: "Id of identity provider that was (or will be) used by subject\
          \ user to log in into onezone, identical to id specified in auth.config\
          \ / saml.config.\n"
        required: true
        type: "string"
      - name: "groupId"
        in: "path"
        description: "Id of a group as recognized by a specific identity provider.\n"
        required: true
        type: "string"
      responses:
        204:
          description: "Group details removed successfully."
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Admin"
  /map_group:
    post:
      tags:
      - "Mapping"
      summary: "Map group"
      description: "Returns storage group GID based on Onedata group ID. This operation\
        \ allows to map group owners of files from federated group Id to storage specific\
        \ group Id. By default, each file in a space belongs to a default space group,\
        \ however this can be changed.\n"
      operationId: "controllers.default_controller.map_group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "groupIdentityRequest"
        description: "Group identity mapping request."
        required: true
        schema:
          $ref: "#/definitions/GroupIdentity"
      responses:
        200:
          description: "Group details returned successfully."
          schema:
            $ref: "#/definitions/GroupDetails"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Group credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "group"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Mapping"
  /map_user_credentials:
    post:
      tags:
      - "Mapping"
      summary: "Map user credentials"
      description: "Returns user credentials to storage based on user federated identity.\
        \ In general, proper storage credentials can be chosen based on any property\
        \ from the user model, including Onedata user Id or user Id from other IdP's,\
        \ as well as any other property such as email.\n"
      operationId: "controllers.default_controller.map_user_credentials"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userCredentialsRequest"
        description: "User credentials mapping request."
        required: true
        schema:
          $ref: "#/definitions/UserCredentialsRequest"
      responses:
        200:
          description: "User details returned successfully."
          schema:
            $ref: "#/definitions/UserStorageCredentials"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Mapping"
  /resolve_acl_group:
    post:
      tags:
      - "Mapping"
      summary: "Resolve group ACL identity"
      description: "Returns the group identity based on group ACL name. This operation\
        \ is used when storage supports ACL's (e.g. NFSv4 or POSIX) and it is required\
        \ that ACL's from storage are translated to Onedata ACL's when importing data\
        \ from legacy storage.\n"
      operationId: "controllers.default_controller.resolve_acl_group_identity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "groupStorageDetails"
        description: "Group details for group mapping."
        required: true
        schema:
          $ref: "#/definitions/GroupDetails"
      responses:
        200:
          description: "Group identity returned successfully."
          schema:
            $ref: "#/definitions/GroupIdentity"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Group credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "acl"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Mapping"
  /resolve_acl_user:
    post:
      tags:
      - "Mapping"
      summary: "Resolve user ACL identity"
      description: "Returns the user identity from storage credentials. This operation\
        \ is used when storage supports ACL's (e.g. NFSv4 or POSIX) and it is required\
        \ that ACL's from storage are translated to Onedata ACL's when importing data\
        \ from legacy storage.\n"
      operationId: "controllers.default_controller.resolve_acl_user_identity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userStorageCredentials"
        description: "User storage credentials for reverse mapping."
        required: true
        schema:
          $ref: "#/definitions/UserStorageCredentials"
      responses:
        200:
          description: "User identity returned successfully."
          schema:
            $ref: "#/definitions/UserIdentity"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User ACL name not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "acl"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Mapping"
  /resolve_group:
    post:
      tags:
      - "Mapping"
      summary: "Resolve group identity"
      description: "Returns group identity based on storage specific group id. This\
        \ operation is used when importing data from legacy storage, and it is needed\
        \ that the user group (e.g. gid on POSIX) storages is mapped to a proper federated\
        \ group Id. The group resolution can be performed in the context of specific\
        \ storage (identified by `storageId` or `storageName`). In case the no storage\
        \ group Id is passed in the `groupDetails` parameter, a default group Id for\
        \ current space can be returned.\n"
      operationId: "controllers.default_controller.resolve_group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "groupStorageDetails"
        description: "Group details for group mapping."
        required: true
        schema:
          $ref: "#/definitions/GroupDetails"
      responses:
        200:
          description: "Group identity returned successfully."
          schema:
            $ref: "#/definitions/GroupIdentity"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Mapping"
  /resolve_user:
    post:
      tags:
      - "Mapping"
      summary: "Resolve user identity"
      description: "Returns the user identity based on provided storage credentials.\
        \ This operation is used when importing data from legacy storage, and it is\
        \ needed that the user storage identity (e.g. uid on POSIX) storages is mapped\
        \ to a proper federated identity.\n"
      operationId: "controllers.default_controller.resolve_user_identity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userStorageCredentials"
        description: "User storage credentials for reverse mapping."
        required: true
        schema:
          $ref: "#/definitions/UserStorageCredentials"
      responses:
        200:
          description: "User identity returned successfully."
          schema:
            $ref: "#/definitions/UserIdentity"
        400:
          description: "Invalid request."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User credentials not found."
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-onedata-resource: "user"
      x-onedata-module: "luma"
      x-onedata-version: 3
      x-tags:
      - tag: "Mapping"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "X-Auth-Token"
    in: "header"
definitions:
  Error:
    type: "object"
    required:
    - "error"
    - "errorDescription"
    properties:
      error:
        type: "string"
        description: "Identifier representing internal error code."
      errorDescription:
        type: "string"
        description: "Detailed error message."
    description: "Generic error model for REST requests."
    example:
      error: "invalid_user"
      errorDescription: "Invalid user ID."
  UserCredentialsRequest:
    type: "object"
    required:
    - "userDetails"
    properties:
      storageId:
        type: "string"
        description: "Storage ID."
      storageName:
        type: "string"
        description: "Administrator defined storage name."
      spaceId:
        type: "string"
        description: "Space id for which the mapping should be performed."
      userDetails:
        $ref: "#/definitions/UserDetails"
    description: "User credentials request - provides all necessary information to\
      \ perform the mapping from federated user to storage credentials.\n"
    example:
      storageId: "AKSDHKAJSHD898798ASDKJHA89878ASD"
      storageName: "NFS"
      spaceId: "98ASDKJHA89878ASDAKSDHKAJSHD898798"
      userDetails:
        id: "ASDJASDNNALSDNALSDNALSDLASD"
        name: "User One"
        linkedAccounts:
        - idp: "github"
          subjectId: "ASDJH65675ASD765ASD890ASD6"
          login: "user1"
          name: "User One"
          emailList:
          - "user.1@example.com"
          - "user.one@example.com"
          - "user.i@example.com"
          groups:
          - "vo:example-org.eu/tm:members/member"
          - "vo:example-org.eu/rl:administration/admin"
        login: "user.one"
        emailList:
        - "user.1@example2.com"
        - "user.one@example2.com"
        - "user.i@example2.com"
  LinkedAccount:
    type: "object"
    required:
    - "idp"
    properties:
      idp:
        type: "string"
        description: "ID of the identity provider."
      subjectId:
        type: "string"
        description: "Permanent user id assigned by IdP."
      login:
        type: "string"
        description: "User login name."
      name:
        type: "string"
        description: "User full name."
      emailList:
        type: "array"
        description: "The list of user email accounts."
        items:
          type: "string"
      groups:
        type: "array"
        description: "A list of strings denoting user group memberships as acquired\
          \ from the\nidentity provider. Memberships are in Onedata normalized form.\n"
        items:
          type: "string"
      custom:
        type: "object"
        description: "This field stores all additional properties that were provided\
          \ by the IdP for this user.\n"
        additionalProperties:
          type: "string"
    description: "User linked account."
    example:
      idp: "github"
      subjectId: "ASDJH65675ASD765ASD890ASD6"
      login: "user1"
      name: "User One"
      emailList:
      - "user.1@example.com"
      - "user.one@example.com"
      - "user.i@example.com"
      groups:
      - "vo:example-org.eu/tm:members/member"
      - "vo:example-org.eu/rl:administration/admin"
      custom:
      - eduPersonPrincipalName: "user.1@example.com"
      - userCertificateSubject: "/C=PL/O=GRID/O=ACME/CN=User One"
  UserDetails:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Onedata user ID. This ID is by default associated with 'onedata'\
          \ IdP.\n"
      name:
        type: "string"
        description: "User name."
      linkedAccounts:
        type: "array"
        description: "The list of user Open ID accounts."
        items:
          $ref: "#/definitions/LinkedAccount"
      login:
        type: "string"
        description: "User login."
      emailList:
        type: "array"
        description: "The list of user email accounts."
        items:
          type: "string"
    description: "User details needed for user mapping."
    example:
      id: "9743a66f914cc249efca164485a19c5c"
      name: "user1"
      linkedAccounts:
      - idp: "github"
        subjectId: "5c28904a-124a-4035-853c-36938143dd4e"
        login: "user1"
        name: "User One"
        emailList:
        - "user.1@example.com"
        - "user.one@example.com"
        - "user.i@example.com"
      - idp: "EGI"
        subjectId: "john@example.com"
        login: "user1"
        name: "User One"
        custom:
          userCertificateSubject: "/C=PL/O=GRID/O=ACME/CN=John Doe"
          eduPersonPrincipalName: "john@example.com"
        emailList:
        - "user.1@example.com"
      login: "user_one"
      emailList:
      - "user.1@example2.com"
      - "user.one@example2.com"
      - "user.i@example2.com"
  UserIdentity:
    type: "object"
    properties:
      idp:
        type: "string"
        description: "Id of identity provider that was (or will be) used by subject\
          \ user to log in\ninto onezone, identical to id specified in auth.config\
          \ / saml.config.\nIf the user was created via onepanel, use the value \"\
          onezone\".\n"
      subjectId:
        type: "string"
        description: "Permanent user id assigned by the identity provider. If the\
          \ user was created\nvia onepanel, use the userId from onepanel (can be checked\
          \ using REST).\n"
    description: "User identity."
    example:
      idp: "google"
      subjectId: "5484af38-8b5d-464f-bdd1-da9ef801090f"
  UserStorageCredentials:
    type: "object"
    required:
    - "type"
    discriminator: "type"
    properties:
      type:
        type: "string"
        description: "Type of storage."
        enum:
        - "posix"
        - "ceph"
        - "s3"
        - "swift"
        - "glusterfs"
      storageId:
        type: "string"
        description: "Storage Id. Either storageId or storageName are required."
      storageName:
        type: "string"
        description: "Storage name. Either storageId or storageName are required."
      aclName:
        type: "string"
        description: "User ACL name."
    description: "Generic storage credentials response type."
  GroupDetails:
    type: "object"
    properties:
      storageId:
        type: "string"
        description: "Storage ID (site specific)."
      storageName:
        type: "string"
        description: "Storage Name (site specific)."
      spaceId:
        type: "string"
        description: "Space id in the context of which the request is performed."
      gid:
        type: "integer"
        description: "Group Id on the storage."
      aclName:
        type: "string"
        description: "Group ACL name."
    description: "Group storage identity.\n"
    example:
      storageId: "Assdwe897Dsdjhx9"
      storageName: "NFS"
      gid: 1001
      aclName: "users"
  GroupIdentity:
    type: "object"
    properties:
      idp:
        type: "string"
        description: "Id of identity provider that was (or will be) used by subject\
          \ user to log in into onezone, identical to id specified in auth.config\
          \ / saml.config.\n"
      groupId:
        type: "string"
        description: "Id of a group as recognized by a specific identity provider.\
          \ If this is provided as NULL, the map_group endpoint will return the default\
          \ GID for current space.\n"
      spaceId:
        type: "string"
        description: "Space ID to provide default group context for space.\n"
    description: "Group identity."
    example:
      idp: "github"
      groupId: "5484af38-8b5d-464f-bdd1-da9ef801090f"
  posix:
    allOf:
    - $ref: "#/definitions/UserStorageCredentials"
    - type: "object"
      properties:
        uid:
          type: "integer"
          description: "POSIX user ID in the local system."
        gid:
          type: "integer"
          description: "POSIX user group ID in the local system."
      description: "The POSIX storage credentials.\n"
  s3:
    allOf:
    - $ref: "#/definitions/UserStorageCredentials"
    - type: "object"
      required:
      - "accessKey"
      properties:
        accessKey:
          type: "string"
          description: "S3 access key for user."
        secretKey:
          type: "string"
          description: "S3 secret key for user."
      description: "The Amazon S3 storage credentials."
  ceph:
    allOf:
    - $ref: "#/definitions/UserStorageCredentials"
    - type: "object"
      required:
      - "key"
      - "username"
      properties:
        username:
          type: "string"
          description: "Ceph user name."
        key:
          type: "string"
          description: "Ceph user key."
      description: "The Ceph storage credentials."
  swift:
    allOf:
    - $ref: "#/definitions/UserStorageCredentials"
    - type: "object"
      required:
      - "username"
      properties:
        username:
          type: "string"
          description: "OpenStack Keystone user name."
        password:
          type: "string"
          description: "OpenStack Keystone user password."
      description: "The OpenStack Keystone credentials."
  glusterfs:
    allOf:
    - $ref: "#/definitions/UserStorageCredentials"
    - type: "object"
      properties:
        uid:
          type: "integer"
          description: "POSIX user ID in the GlusterFS server."
        gid:
          type: "integer"
          description: "POSIX user group ID in the GlusterFS server."
        certificate:
          type: "string"
          description: "User certificate in PEM format. The value must be formatted\
            \ properly (including newlines) in PEM format.\n"
        key:
          type: "string"
          description: "User private key for certificate in PEM format."
        caCertificate:
          type: "string"
          description: "The certificate of the CA signing the user certificate. Must\
            \ include the entire necessary chain of trust, and the GlusterFS server\
            \ must trust this CA.\n"
      description: "The GlusterFS storage credentials. For non-TLS connection, `uid`\
        \ and `gid` properties are sufficient. However, for fully secure connection\
        \ each user must be also identified by a certificate, which must be returned\
        \ in this response.\n"
